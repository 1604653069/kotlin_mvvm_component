apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        multiDexEnabled true

    }
    signingConfigs {
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    //读取配置文件
    getSigningProperties()
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModel.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    buildTypes {

        debug {
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            //多渠道打包及自定义打包apk名称
            //gradle3.0版本打包格式
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    def formattedDate = releaseTime()
                    if (outputFile != null && outputFile.name.endsWith(".apk")) {
                        def fileName
                        if (variant.buildType.name.equals('release')) {
                            fileName = "release_v${variant.mergedFlavor.versionName}_${variant.mergedFlavor.versionCode}_${formattedDate}.apk"
                        } else {
                            fileName = "debug_v${variant.mergedFlavor.versionName}_${variant.mergedFlavor.versionCode}_${formattedDate}.apk"
                        }
                        outputFileName = fileName
                    }
                }
            }
        }
    }
}
configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.6.0'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.android.support:multidex:1.0.3'
    //宿主项目中判断组件是否需要独立运行
    if (isBuildModel.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //主业务模块
        implementation project(':module-main')
        //首页模块
        implementation project(':module-home')
        implementation project(':module-mine')
        implementation project(':module-official')
        implementation project(':module-project')
        implementation project(':module-square')
    }
}
// 读取签名配置
def getSigningProperties() {
    def propFile = file('../signing.properties')
    if (propFile.exists() && propFile.canRead()) {
        def props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file('../' + props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties are found but some entries are missed!'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties are not found!'
        android.buildTypes.release.signingConfig = null
    }
}

// 定义打包时间
static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}